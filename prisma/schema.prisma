generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -- Enums -----------------------------------------------------------------

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  READY4PICKUP
  COMPLETED
  CANCELLED
}

enum ShippingMethod {
  DELIVERY
  PICKUP
}

enum ProductType {
  CARD
  ACCESSORY
}

// -- Core Models ----------------------------------------------------------

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  address       Json?     @db.Json
  paymentMethod String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  carts    Cart[]
  orders   Order[]
}

model Account {
  provider          String
  providerAccountId String
  userId            String  @db.Uuid
  type              String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamp(6)

  @@id([identifier, token])
}

// -- Product & Inventory --------------------------------------------------

model Product {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String   @unique(map: "product_slug_idx")
  category    String
  images      String[]
  brand       String
  description String
  stock       Int
  price       Decimal  @default(0) @db.Decimal(12, 2)
  rating      Decimal  @default(0) @db.Decimal(3, 2)
  numReviews  Int      @default(0)
  isFeatured  Boolean  @default(false)
  banner      String?
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt

  orderItems OrderItem[]
}

model Store {
  id       String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String         @unique
  address  String
  products StoreProduct[] @relation("StoreToProducts")
}


model AccessoryProduct {
  id          String         @id @default(uuid()) @db.Uuid
  name        String
  description String?
  brand       String?
  images    String[]
  category    String
  rating Float? @default(0)
  numReviews Int? @default(0)
  updatedAt   DateTime       @updatedAt
  products    StoreProduct[] @relation("AccessoryToStoreProduct")
}

model CardMetadata {
  id             String         @id @default(uuid()) @db.Uuid
  scryfallId     String         @unique
  name           String
  setCode        String
  setName        String
  manaCost       String?
  collectorNum   String
  oracleText     String?
  colorIdentity  String[]
  imageUrl       String
  rarity         String?
  type           String?
  cardKingdomUri String?
  usdPrice       Float?
  usdFoilPrice   Float?
  products       StoreProduct[] @relation("MetadataToStoreProduct")
}

// -- Shopping Cart --------------------------------------------------------

model Cart {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionCartId String     @unique
  userId        String?    @db.Uuid
  createdAt     DateTime   @default(now()) @db.Timestamp(6)
  updatedAt     DateTime   @updatedAt
  user          User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items         CartItem[]
}

model CartItem {
  id             String   @id @default(uuid()) @db.Uuid
  cartId         String   @db.Uuid
  storeProductId String   @db.Uuid
  quantity       Int      @default(1)
  addedAt        DateTime @default(now())

  cart         Cart         @relation(fields: [cartId], references: [id], onDelete: Cascade)
  storeProduct StoreProduct @relation(fields: [storeProductId], references: [id], onDelete: Cascade)

  @@unique([cartId, storeProductId])
}

// -- Orders ---------------------------------------------------------------

model Order {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String         @db.Uuid
  status          OrderStatus    @default(PENDING)
  shippingMethod  ShippingMethod
  shippingAddress Json           @db.Json
  shippingPrice   Decimal        @db.Decimal(12, 2)
  paymentMethod   String
  paymentResult   Json?          @db.Json

  itemsPrice Decimal @db.Decimal(12, 2)
  taxPrice   Decimal @db.Decimal(12, 2)
  totalPrice Decimal @db.Decimal(12, 2)

  paidAt      DateTime? @db.Timestamp(6)
  deliveredAt DateTime? @db.Timestamp(6)
  pickedUpAt  DateTime? @db.Timestamp(6)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt

  user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
}

model OrderItem {
  orderId   String  @db.Uuid
  productId String  @db.Uuid
  qty       Int
  price     Decimal @db.Decimal(12, 2)
  name      String
  slug      String
  image     String

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId])
}

model StoreProduct {
  id             String      @id @default(uuid()) @db.Uuid
  slug           String      @unique
  price          Decimal
  stock          Int
  customName     String?
  type           ProductType

  storeId        String?      @db.Uuid
  store          Store?       @relation("StoreToProducts", fields: [storeId], references: [id])

  cardMetadataId String?     @db.Uuid
  cardMetadata   CardMetadata? @relation("MetadataToStoreProduct", fields: [cardMetadataId], references: [id])

  accessoryId    String?     @db.Uuid
  accessory      AccessoryProduct? @relation("AccessoryToStoreProduct", fields: [accessoryId], references: [id])

  CartItem       CartItem[]
  lastUpdated DateTime @default(now()) @updatedAt 
}
