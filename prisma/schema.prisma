generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String      @unique(map: "product_slug_idx")
  category    String
  images      String[]
  brand       String
  description String
  stock       Int
  price       Decimal     @default(0) @db.Decimal(12, 2)
  rating      Decimal     @default(0) @db.Decimal(3, 2)
  numReviews  Int         @default(0)
  isFeatured  Boolean     @default(false)
  banner      String?
  createdAt   DateTime    @default(now()) @db.Timestamp(6)
  orderItem   OrderItem[]
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  address       Json?     @db.Json
  paymentMethod String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  account       Account[]
  session       Session[]
  Cart          Cart[]
  Order         Order[]
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamp(6)

  @@id([identifier, token])
}

model Cart {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String?  @db.Uuid
  sessionCartId String   @unique
  items         Json[]   @default([]) @db.Json
  itemsPrice    Decimal  @db.Decimal(12, 3)
  totalPrice    Decimal  @db.Decimal(12, 3)
  shippingPrice Decimal  @db.Decimal(12, 3)
  taxPrice      Decimal  @db.Decimal(12, 3)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

///We may want pickup
enum ShippingMethod {
  DELIVERY
  PICKUP
}

//We may have multiple stores.
model Store {
  id      String @id @default(cuid())
  name    String
  address String
}

//Schema for the orders

model Order {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String      @db.Uuid
  shippingAddress Json        @db.Json
  paymentMethod   String
  paymentResult   Json?       @db.Json
  itemsPrice      Decimal     @db.Decimal(12, 2)
  shippingPrice   Decimal     @db.Decimal(12, 2)
  taxPrice        Decimal     @db.Decimal(12, 2)
  totalPrice      Decimal     @db.Decimal(12, 2)
  isPaid          Boolean     @default(false)
  paidAt          DateTime?   @db.Timestamp(6)
  isDelivered     Boolean     @default(false)
  deliveredAt     DateTime?   @db.Timestamp(6)
  createdAt       DateTime    @default(now()) @db.Timestamp(6)
  user            User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]
}

model OrderItem {
  orderId   String  @db.Uuid
  productId String  @db.Uuid
  qty       Int
  price     Decimal @db.Decimal(12, 2)
  name      String
  slug      String
  image     String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId], map: "orderitems_orderId_productId_pk")
}

///Lets start thinking cards.
model StoreProduct {
  id          String      @id @default(uuid())
  type        ProductType
  cardId      String?     @unique
  accessoryId String?     @unique

  card      CardProduct?      @relation(fields: [cardId], references: [id])
  accessory AccessoryProduct? @relation(fields: [accessoryId], references: [id])

  stock     Int
  price     Decimal
  slug      String?  @unique
  createdAt DateTime @default(now())

  // @@check(
  //   // enforce only one of cardId or accessoryId is filled
  //   "(cardId IS NOT NULL AND accessoryId IS NULL) OR (cardId IS NULL AND accessoryId IS NOT NULL)"
  // )
}

enum ProductType {
  CARD
  ACCESSORY
}

model AccessoryProduct {
  id           String        @id @default(uuid())
  name         String
  description  String?
  brand        String?
  imageUrl     String?
  category     String // e.g., sleeves, dice, mats
  StoreProduct StoreProduct?
}

model CardMetadata {
  id             String        @id @default(uuid())
  scryfallId     String        @unique
  name           String
  setCode        String
  setName        String
  manaCost       String?
  collectorNum   String
  oracleText     String?
  colorIdentity  String[]
  imageUrl       String
  rarity         String?
  type           String?
  cardKingdomUri String?
  usdPrice       Float?
  usdFoilPrice   Float?
  products       CardProduct[] @relation("ProductToMetadata")
}

model CardProduct {
  id           String        @id @default(uuid())
  metadata     CardMetadata  @relation("ProductToMetadata", fields: [metadataId], references: [id])
  metadataId   String
  stock        Int
  slug         String        @unique
  price        Decimal
  StoreProduct StoreProduct?
}
