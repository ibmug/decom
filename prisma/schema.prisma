generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// USERS / AUTH
//

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  address       Json?     @db.Json
  paymentMethod String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  carts         Cart[]
  orders        Order[]
  sessions      Session[]
}

model Account {
  provider          String
  providerAccountId String
  userId            String   @db.Uuid
  type              String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//
// STORES
//

model Store {
  id       String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String         @unique
  address  String
  products StoreProduct[] @relation("StoreToProducts")
}

model AccessoryProduct {
  id          String         @id @default(uuid()) @db.Uuid
  name        String
  description String?
  brand       String?
  category    String
  updatedAt   DateTime       @updatedAt
  products    StoreProduct[] @relation("AccessoryToStoreProduct")
}

//
// CARD METADATA
//

model CardMetadata {
  id               String         @id @default(uuid()) @db.Uuid
  scryfallId       String         @unique
  oracleId String
  name             String
  setCode          String
  setName          String
  manaCost         String?
  cmc              Int?
  collectorNum     String
  oracleText       String?
  colorIdentity    String[]
  rarity           String?
  type             String?
  cardKingdomUri   String?
  usdPrice         Float?
  usdFoilPrice     Float?
  products         StoreProduct[] @relation("MetadataToStoreProduct")
}

//
// CART
//

model Cart {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionCartId String     @unique
  userId        String?    @unique @db.Uuid
  createdAt     DateTime   @default(now()) @db.Timestamp(6)
  updatedAt     DateTime   @updatedAt
  itemsPrice    Decimal    @default(0.00)
  shippingPrice Decimal    @default(0.00)
  taxPrice      Decimal    @default(0.00)
  totalPrice    Decimal    @default(0.00)
  user          User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items         CartItem[]
}

model CartItem {
  id             String   @id @default(uuid()) @db.Uuid
  cartId         String   @db.Uuid
  productId      String   @db.Uuid
  inventoryId    String   @db.Uuid
  quantity       Int      @default(1)
  addedAt        DateTime @default(now())

  cart         Cart         @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  storeProduct StoreProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventory    Inventory?   @relation(fields: [inventoryId], references: [id])

  @@unique([cartId, productId, inventoryId])
}

//
// ORDERS
//

model Order {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String         @db.Uuid
  status          OrderStatus    @default(PENDING)
  shippingMethod  ShippingMethod
  shippingAddress Json           @db.Json
  shippingPrice   Decimal        @db.Decimal(12, 2)
  paymentMethod   String
  paymentResult   Json?          @db.Json
  itemsPrice      Decimal        @db.Decimal(12, 2)
  taxPrice        Decimal        @db.Decimal(12, 2)
  totalPrice      Decimal        @db.Decimal(12, 2)
  paidAt          DateTime?      @db.Timestamp(6)
  deliveredAt     DateTime?      @db.Timestamp(6)
  pickedUpAt      DateTime?      @db.Timestamp(6)
  createdAt       DateTime       @default(now()) @db.Timestamp(6)
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]
}

model OrderItem {
  orderId        String       @db.Uuid
  productId      String       @db.Uuid
  inventoryId    String

  qty            Int
  price          Decimal      @db.Decimal(12, 2)
  name           String
  slug           String
  image          String

  order          Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  storeProduct   StoreProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId, inventoryId])   // <--- FIX: composite PK must include inventoryId
}


//
// STOREPRODUCT & INVENTORY
//

model StoreProduct {
  id             String      @id @default(uuid()) @db.Uuid
  slug           String      @unique
  type           ProductType
  cardMetadataId String?     @db.Uuid
  updatedAt      DateTime    @default(now())
  accessoryId    String?     @db.Uuid
  storeId        String?     @db.Uuid

  price          Decimal     @default(0.00)  
  rating         Float?      @default(0)
  numReviews     Int?        @default(0)
  images         String[]    @default([])

  cardMetadata CardMetadata?     @relation("MetadataToStoreProduct", fields: [cardMetadataId], references: [id])
  accessory    AccessoryProduct? @relation("AccessoryToStoreProduct", fields: [accessoryId], references: [id])
  store        Store?            @relation("StoreToProducts", fields: [storeId], references: [id])
  inventory    Inventory[]
  orderItems   OrderItem[]
  CartItem     CartItem[]
}

model Inventory {
  id             String         @id @default(uuid()) @db.Uuid
  productId      String         @db.Uuid
  //price          Decimal
  stock          Int
  language       String?
  condition      CardCondition?
  lastUpdated    DateTime       @default(now()) @updatedAt

  storeProduct StoreProduct @relation(fields: [productId], references: [id])
  cartItems    CartItem[]
}

//
// ENUMS
//

enum ProductType {
  CARD
  ACCESSORY
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  READY4PICKUP
  COMPLETED
  CANCELLED
}

enum ShippingMethod {
  DELIVERY
  PICKUP
}

enum CardCondition {
  NM
  LP
  MP
  HP
  DMG
}
